// frontend/src/pages/hrmanager/allpdfGenarator.js
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

// Create beautiful employee PDF with enhanced design
export const createBeautifulEmployeePDF = ({
  employees,
  department,
  currentUser,
  formatDate,
}) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;

  // Safe user data
  const userName = currentUser?.name || "HR Manager";
  const userLogin = currentUser?.login || currentUser?.email || "user";
  const userRole = (currentUser?.role || "hrmanager").toUpperCase();

  // Theme colors
  const primaryBlue = [37, 99, 235];
  const lightGray = [249, 250, 251];
  const darkGray = [75, 85, 99];

  // ---------- HEADER ----------
  doc.setFillColor(...primaryBlue);
  doc.rect(0, 0, pageWidth, 45, "F");

  doc.setTextColor(255, 255, 255);
  doc.setFontSize(22);
  doc.setFont("helvetica", "bold");
  doc.text("HR MANAGEMENT SYSTEM", 14, 18);

  doc.setFontSize(16);
  doc.setFont("helvetica", "bold");
  doc.text("EMPLOYEE REPORT", 14, 28);

  doc.setFontSize(12);
  doc.setFont("helvetica", "normal");
  const deptText =
    department === "All" ? "All Departments" : `${department} Department`;
  doc.text(deptText, 14, 36);

  // User info box (top right)
  doc.setFillColor(255, 255, 255);
  doc.rect(pageWidth - 70, 8, 60, 29, "F");
  doc.setTextColor(...darkGray);
  doc.setFontSize(8);
  doc.setFont("helvetica", "bold");
  doc.text("GENERATED BY:", pageWidth - 66, 14);
  doc.setFont("helvetica", "normal");
  doc.text(userName, pageWidth - 66, 19);
  doc.text(`Login: ${userLogin}`, pageWidth - 66, 24);
  doc.text(`Role: ${userRole}`, pageWidth - 66, 29);

  // ---------- SUMMARY ----------
  doc.setTextColor(0, 0, 0);
  doc.setFillColor(...lightGray);
  doc.rect(14, 55, pageWidth - 28, 20, "F");
  doc.setDrawColor(220, 220, 220);
  doc.rect(14, 55, pageWidth - 28, 20, "S");

  doc.setFontSize(11);
  doc.setFont("helvetica", "bold");
  doc.text("REPORT SUMMARY", 18, 63);

  doc.setFontSize(9);
  doc.setFont("helvetica", "normal");
  doc.text(`Total Employees: ${employees.length}`, 18, 69);
  doc.text(`Department Filter: ${deptText}`, 90, 69);

  // ---------- EMPLOYEE TABLE ----------
  const tableColumns = [
    { header: "ID", dataKey: "id" },
    { header: "EMPLOYEE NAME", dataKey: "name" },
    { header: "POSITION", dataKey: "position" },
    { header: "DEPARTMENT", dataKey: "department" },
    { header: "CONTACT", dataKey: "contact" },
    { header: "ADDRESS", dataKey: "address" },
    { header: "JOINED", dataKey: "joinDate" },
  ];

  const tableRows = employees.map((emp, i) => ({
    id: emp.employeeID || `EMP${(i + 1).toString().padStart(3, "0")}`,
    name: emp.name || "N/A",
    position: emp.position || "N/A",
    department: emp.department || "N/A",
    contact: emp.contactNumber || "N/A",
    address:
      emp.address && emp.address.length > 25
        ? emp.address.slice(0, 25) + "..."
        : emp.address || "N/A",
    joinDate: emp.createdAt ? formatDate(emp.createdAt) : "N/A",
  }));

  autoTable(doc, {
    columns: tableColumns,
    body: tableRows,
    startY: 85,
    theme: "grid",
    styles: {
      fontSize: 8,
      cellPadding: 3,
      overflow: "linebreak",
      halign: "left",
      valign: "middle",
    },
    headStyles: {
      fillColor: primaryBlue,
      textColor: [255, 255, 255],
      fontStyle: "bold",
      halign: "center",
    },
    alternateRowStyles: { fillColor: [248, 250, 252] },
    columnStyles: {
      id: { cellWidth: 18, halign: "center", fontStyle: "bold" },
      name: { cellWidth: 32, fontStyle: "bold" },
      position: { cellWidth: 28 },
      department: { cellWidth: 22, halign: "center" },
      contact: { cellWidth: 24 },
      address: { cellWidth: 32 },
      joinDate: { cellWidth: 18, halign: "center" },
    },
    margin: { left: 14, right: 14 },
    didDrawPage: (data) => {
      // FOOTER
      const pageCount = doc.internal.getNumberOfPages();
      const currentPage = doc.internal.getCurrentPageInfo().pageNumber;

      doc.setFillColor(245, 245, 245);
      doc.rect(0, pageHeight - 20, pageWidth, 20, "F");

      doc.setFontSize(8);
      doc.setTextColor(100, 100, 100);
      doc.setFont("helvetica", "normal");

      doc.text(
        "HR Management System | Garment Factory Ltd.",
        14,
        pageHeight - 12
      );

      doc.text(`Generated by: ${userName}`, pageWidth - 14, pageHeight - 12, {
        align: "right",
      });

      doc.setDrawColor(200, 200, 200);
      doc.line(14, pageHeight - 18, pageWidth - 14, pageHeight - 18);
    },
  });

  // ---------- DEPARTMENT BREAKDOWN ----------
  const deptStats = employees.reduce((acc, e) => {
    const dept = e.department || "Unknown";
    acc[dept] = (acc[dept] || 0) + 1;
    return acc;
  }, {});

  if (Object.keys(deptStats).length >= 1) {
    const lastTableY = doc.lastAutoTable?.finalY || 85;
    const breakdownStartY = lastTableY + 20;

    doc.setFontSize(12);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(...primaryBlue);
    doc.text("DEPARTMENT BREAKDOWN", 14, breakdownStartY);

    const statsData = Object.entries(deptStats)
      .sort(([, a], [, b]) => b - a)
      .map(([dept, count]) => [
        dept,
        String(count),
        `${((count / employees.length) * 100).toFixed(1)}%`,
        "â˜…".repeat(Math.min(5, Math.ceil((count / employees.length) * 5))),
      ]);

    autoTable(doc, {
      head: [["Department", "Count", "Percentage"]],
      body: statsData,
      startY: breakdownStartY + 10,
      theme: "striped",
      styles: { fontSize: 9, cellPadding: 4 },
      headStyles: {
        fillColor: [16, 185, 129],
        textColor: [255, 255, 255],
        fontStyle: "bold",
      },
      columnStyles: {
        0: { cellWidth: 50, fontStyle: "bold" },
        1: { cellWidth: 25, halign: "center" },
        2: { cellWidth: 25, halign: "center" },
        3: { cellWidth: 30, halign: "center", fontSize: 12 },
      },
      margin: { left: 14 },
    });
  }

  // ---------- SAVE PDF ----------
  const fileName = `Employee_Report_${department}_${userLogin}.pdf`;
  doc.save(fileName);

  console.log(`âœ… PDF Generated Successfully: ${fileName}`);
  console.log(`ðŸ“Š Total Employees: ${employees.length}`);
};

// Utility date formatter
export const formatDateUtil = (dateStr) => {
  const d = new Date(dateStr);
  return `${(d.getMonth() + 1).toString().padStart(2, "0")}/${d
    .getDate()
    .toString()
    .padStart(2, "0")}/${d.getFullYear()}`;
};
